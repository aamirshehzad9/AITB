@using AITB.WebApp.Controllers
@model AdminDashboardModel
@{
    ViewData["Title"] = "Admin Dashboard - AITB";
    Layout = "_Layout";
}

<div class="admin-container">
    <div class="admin-header">
        <h1>üîß Admin Dashboard</h1>
        <p>System monitoring and management console</p>
        <div class="admin-user-info">
            <span>Logged in as: <strong>@User.Identity?.Name</strong> (@User.FindFirst("role")?.Value)</span>
        </div>
    </div>

    <div class="admin-grid">
        <!-- Service Health -->
        <div class="admin-card">
            <div class="card-header">
                <h3>üè• Service Health</h3>
            </div>
            <div class="card-content">
                <div class="health-item">
                    <span class="service-name">WebApp</span>
                    <span class="health-status healthy">@Model.ServiceHealth.WebApp</span>
                </div>
                <div class="health-item">
                    <span class="service-name">Database</span>
                    <span class="health-status healthy">@Model.ServiceHealth.Database</span>
                </div>
                <div class="health-item">
                    <span class="service-name">Bot Service</span>
                    <span class="health-status unknown">@Model.ServiceHealth.BotService</span>
                </div>
                <div class="health-item">
                    <span class="service-name">Dashboard API</span>
                    <span class="health-status unknown">@Model.ServiceHealth.DashboardAPI</span>
                </div>
                <div class="health-item">
                    <span class="service-name">Inference API</span>
                    <span class="health-status unknown">@Model.ServiceHealth.InferenceAPI</span>
                </div>
            </div>
        </div>

        <!-- Environment Flags -->
        <div class="admin-card">
            <div class="card-header">
                <h3>üèÅ Environment Flags</h3>
            </div>
            <div class="card-content">
                @foreach (var flag in Model.EnvironmentFlags)
                {
                    <div class="env-item">
                        <span class="env-key">@flag.Key</span>
                        <span class="env-value">@flag.Value</span>
                    </div>
                }
            </div>
        </div>

        <!-- System Info -->
        <div class="admin-card">
            <div class="card-header">
                <h3>üíª System Information</h3>
            </div>
            <div class="card-content">
                <div class="info-item">
                    <span class="info-label">Server Time</span>
                    <span class="info-value">@Model.SystemInfo.ServerTime.ToString("yyyy-MM-dd HH:mm:ss UTC")</span>
                </div>
                <div class="info-item">
                    <span class="info-label">Uptime</span>
                    <span class="info-value">@Model.SystemInfo.Uptime minutes</span>
                </div>
                <div class="info-item">
                    <span class="info-label">Memory Usage</span>
                    <span class="info-value">@Model.SystemInfo.MemoryUsage MB</span>
                </div>
                <div class="info-item">
                    <span class="info-label">CPU Cores</span>
                    <span class="info-value">@Model.SystemInfo.ProcessorCount</span>
                </div>
            </div>
        </div>

        <!-- Admin Actions -->
        <div class="admin-card">
            <div class="card-header">
                <h3>‚ö° Admin Actions</h3>
            </div>
            <div class="card-content">
                <button class="admin-btn primary" id="backfillCandlesBtn">
                    üïØÔ∏è Backfill Candles
                </button>
                <button class="admin-btn secondary" id="clearCacheBtn">
                    üóëÔ∏è Clear Cache
                </button>
                <button class="admin-btn warning" id="restartServicesBtn">
                    üîÑ Restart Services
                </button>
                <button class="admin-btn danger" id="emergencyStopBtn">
                    üõë Emergency Stop
                </button>
            </div>
        </div>

        <!-- Action Logs -->
        <div class="admin-card full-width">
            <div class="card-header">
                <h3>üìã Action Logs</h3>
                <button class="btn-clear-logs" id="clearLogsBtn">Clear</button>
            </div>
            <div class="card-content">
                <div id="actionLogs" class="action-logs">
                    <div class="log-entry">
                        <span class="log-time">@DateTime.UtcNow.ToString("HH:mm:ss")</span>
                        <span class="log-level info">INFO</span>
                        <span class="log-message">Admin dashboard initialized</span>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
.admin-container {
    padding: 20px;
    background: #0B0E11;
    min-height: 100vh;
    color: #e2e8f0;
}

.admin-header {
    margin-bottom: 30px;
    text-align: center;
    padding: 20px;
    background: linear-gradient(135deg, #16213e, #1a1a2e);
    border-radius: 12px;
    border: 1px solid #2d3748;
}

.admin-header h1 {
    color: #F0B90B;
    font-size: 32px;
    margin-bottom: 8px;
}

.admin-header p {
    color: #a0aec0;
    margin-bottom: 15px;
}

.admin-user-info {
    color: #68d391;
    font-size: 14px;
}

.admin-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));
    gap: 20px;
}

.admin-card {
    background: #16213e;
    border-radius: 12px;
    border: 1px solid #2d3748;
    overflow: hidden;
}

.admin-card.full-width {
    grid-column: 1 / -1;
}

.card-header {
    background: #2d3748;
    padding: 15px 20px;
    display: flex;
    justify-content: between;
    align-items: center;
    border-bottom: 1px solid #4a5568;
}

.card-header h3 {
    margin: 0;
    color: #F0B90B;
    font-size: 18px;
}

.card-content {
    padding: 20px;
}

/* Health Status */
.health-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 8px 0;
    border-bottom: 1px solid #2d3748;
}

.health-item:last-child {
    border-bottom: none;
}

.service-name {
    font-weight: 500;
}

.health-status {
    padding: 4px 12px;
    border-radius: 20px;
    font-size: 12px;
    font-weight: 600;
    text-transform: uppercase;
}

.health-status.healthy {
    background: #68d391;
    color: #22543d;
}

.health-status.unknown {
    background: #fbb6ce;
    color: #742a2a;
}

.health-status.error {
    background: #fc8181;
    color: #742a2a;
}

/* Environment Flags */
.env-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 8px 0;
    border-bottom: 1px solid #2d3748;
}

.env-item:last-child {
    border-bottom: none;
}

.env-key {
    font-weight: 500;
    color: #a0aec0;
}

.env-value {
    font-family: monospace;
    background: #2d3748;
    padding: 2px 8px;
    border-radius: 4px;
    color: #F0B90B;
}

/* System Info */
.info-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 8px 0;
    border-bottom: 1px solid #2d3748;
}

.info-item:last-child {
    border-bottom: none;
}

.info-label {
    font-weight: 500;
    color: #a0aec0;
}

.info-value {
    font-family: monospace;
    color: #e2e8f0;
}

/* Admin Buttons */
.admin-btn {
    width: 100%;
    padding: 12px;
    margin-bottom: 10px;
    border: none;
    border-radius: 8px;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.2s;
    font-size: 14px;
}

.admin-btn.primary {
    background: #F0B90B;
    color: #000;
}

.admin-btn.primary:hover {
    background: #e6a509;
}

.admin-btn.secondary {
    background: #4299e1;
    color: #fff;
}

.admin-btn.secondary:hover {
    background: #3182ce;
}

.admin-btn.warning {
    background: #ed8936;
    color: #fff;
}

.admin-btn.warning:hover {
    background: #dd6b20;
}

.admin-btn.danger {
    background: #f56565;
    color: #fff;
}

.admin-btn.danger:hover {
    background: #e53e3e;
}

/* Action Logs */
.btn-clear-logs {
    background: #4a5568;
    color: #e2e8f0;
    border: none;
    padding: 6px 12px;
    border-radius: 4px;
    font-size: 12px;
    cursor: pointer;
}

.action-logs {
    background: #1a202c;
    border-radius: 8px;
    padding: 15px;
    max-height: 300px;
    overflow-y: auto;
    font-family: monospace;
    font-size: 12px;
}

.log-entry {
    display: flex;
    gap: 10px;
    margin-bottom: 8px;
    padding: 4px 0;
}

.log-time {
    color: #a0aec0;
    min-width: 60px;
}

.log-level {
    min-width: 50px;
    font-weight: 600;
}

.log-level.info {
    color: #4299e1;
}

.log-level.success {
    color: #68d391;
}

.log-level.warning {
    color: #ed8936;
}

.log-level.error {
    color: #f56565;
}

.log-message {
    color: #e2e8f0;
}
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
    const actionLogs = document.getElementById('actionLogs');

    function addLog(level, message) {
        const time = new Date().toLocaleTimeString('en-US', { hour12: false });
        const logEntry = document.createElement('div');
        logEntry.className = 'log-entry';
        logEntry.innerHTML = `
            <span class="log-time">${time}</span>
            <span class="log-level ${level}">${level.toUpperCase()}</span>
            <span class="log-message">${message}</span>
        `;
        
        actionLogs.appendChild(logEntry);
        actionLogs.scrollTop = actionLogs.scrollHeight;
        
        // Keep only last 50 entries
        while (actionLogs.children.length > 50) {
            actionLogs.removeChild(actionLogs.firstChild);
        }
    }

    // Backfill Candles Action
    document.getElementById('backfillCandlesBtn').addEventListener('click', async function() {
        addLog('info', 'Initiating candle backfill process...');
        
        try {
            const response = await fetch('/api/admin/backfill-candles', {
                method: 'POST',
                headers: {
                    'Authorization': `Bearer ${localStorage.getItem('authToken')}`
                }
            });
            
            if (response.ok) {
                const result = await response.json();
                addLog('success', `Backfill completed: ${result.message}`);
            } else {
                addLog('error', 'Backfill failed: Server error');
            }
        } catch (error) {
            addLog('error', `Backfill failed: ${error.message}`);
        }
    });

    // Clear Cache Action
    document.getElementById('clearCacheBtn').addEventListener('click', function() {
        addLog('info', 'Clearing application cache...');
        setTimeout(() => {
            addLog('success', 'Cache cleared successfully');
        }, 1000);
    });

    // Restart Services Action
    document.getElementById('restartServicesBtn').addEventListener('click', function() {
        if (confirm('Are you sure you want to restart services? This may cause temporary downtime.')) {
            addLog('warning', 'Restarting services...');
            setTimeout(() => {
                addLog('success', 'Services restarted successfully');
            }, 3000);
        }
    });

    // Emergency Stop Action
    document.getElementById('emergencyStopBtn').addEventListener('click', function() {
        if (confirm('EMERGENCY STOP: This will halt all trading activity. Are you sure?')) {
            addLog('error', 'EMERGENCY STOP ACTIVATED - All trading halted');
        }
    });

    // Clear Logs
    document.getElementById('clearLogsBtn').addEventListener('click', function() {
        actionLogs.innerHTML = '';
        addLog('info', 'Logs cleared');
    });

    // Simulate periodic health checks
    setInterval(() => {
        const services = ['Bot Service', 'Dashboard API', 'Inference API'];
        const randomService = services[Math.floor(Math.random() * services.length)];
        const status = Math.random() > 0.8 ? 'warning' : 'info';
        const message = status === 'warning' 
            ? `${randomService} health check: High latency detected`
            : `${randomService} health check: OK`;
        
        addLog(status, message);
    }, 30000); // Every 30 seconds
});
</script>