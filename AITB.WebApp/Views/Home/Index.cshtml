@model AITB.WebApp.Controllers.DashboardModel

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>AITB Trading Bot Dashboard</title>
    <style>
        body { font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; margin: 0; padding: 20px; background: #f5f5f5; }
        .container { max-width: 1200px; margin: 0 auto; background: white; padding: 30px; border-radius: 10px; box-shadow: 0 0 20px rgba(0,0,0,0.1); }
        .header { text-align: center; margin-bottom: 40px; }
        .header h1 { color: #2c3e50; margin-bottom: 10px; }
        .status-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 20px; margin-bottom: 30px; }
        .status-card { background: #ecf0f1; padding: 20px; border-radius: 8px; border-left: 4px solid #3498db; }
        .status-card.healthy { border-left-color: #27ae60; }
        .status-card.offline { border-left-color: #e74c3c; }
        .status-card h3 { margin: 0 0 10px 0; color: #2c3e50; }
        .status-card p { margin: 5px 0; color: #7f8c8d; }
        .status-card a { color: #3498db; text-decoration: none; font-weight: bold; }
        .status-card a:hover { text-decoration: underline; }
        .actions { display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px; margin-bottom: 30px; }
        .action-btn { display: block; padding: 12px 20px; background: #3498db; color: white; text-decoration: none; border-radius: 5px; text-align: center; transition: background 0.3s; border: none; cursor: pointer; }
        .action-btn:hover { background: #2980b9; }
        .test-section { background: #f8f9fa; padding: 20px; border-radius: 8px; margin-bottom: 20px; }
        .test-section h3 { margin-top: 0; color: #2c3e50; }
        .test-input { width: 100%; padding: 10px; border: 1px solid #ddd; border-radius: 4px; margin-bottom: 10px; }
        .test-result { background: #2c3e50; color: white; padding: 15px; border-radius: 4px; margin-top: 10px; max-height: 200px; overflow-y: auto; }
        .footer { text-align: center; margin-top: 40px; color: #7f8c8d; font-size: 14px; }
        .status-healthy { color: #27ae60; font-weight: bold; }
        .status-offline { color: #e74c3c; font-weight: bold; }
    </style>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/6.0.1/signalr.min.js"></script>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>ü§ñ AITB Trading Bot Dashboard</h1>
            <p>AI Trading Bot + GOmini-AI Integration Control Panel</p>
        </div>
        
        <div class="status-grid">
            <div class="status-card @(Model.MCPStatus == "Healthy" ? "healthy" : "offline")">
                <h3>üéõÔ∏è MCP Hub</h3>
                <p>Status: <span class="@(Model.MCPStatus == "Healthy" ? "status-healthy" : "status-offline")">@Model.MCPStatus</span></p>
                <p><a href="@Model.MCPUrl" target="_blank">@Model.MCPUrl</a></p>
            </div>
            
            <div class="status-card @(Model.InfluxStatus == "Healthy" ? "healthy" : "offline")">
                <h3>üíæ InfluxDB</h3>
                <p>Status: <span class="@(Model.InfluxStatus == "Healthy" ? "status-healthy" : "status-offline")">@Model.InfluxStatus</span></p>
                <p><a href="@Model.InfluxUrl" target="_blank">@Model.InfluxUrl</a></p>
            </div>
            
            <div class="status-card healthy">
                <h3>üìä Streamlit Dashboard</h3>
                <p>Status: <span class="status-healthy">Active</span></p>
                <p><a href="@Model.StreamlitUrl" target="_blank">@Model.StreamlitUrl</a></p>
            </div>
            
            <div class="status-card healthy">
                <h3>üìà Grafana</h3>
                <p>Status: <span class="status-healthy">Active</span></p>
                <p><a href="@Model.GrafanaUrl" target="_blank">@Model.GrafanaUrl</a></p>
            </div>
        </div>
        
        <div class="actions">
            <a href="@Model.StreamlitUrl" class="action-btn" target="_blank">Open Trading Dashboard</a>
            <a href="@Model.GrafanaUrl" class="action-btn" target="_blank">Open Monitoring</a>
            <a href="@Model.MCPUrl/docs" class="action-btn" target="_blank">MCP API Docs</a>
            <button class="action-btn" onclick="location.reload()">Refresh Status</button>
        </div>

        <div class="test-section">
            <h3>üß† Test AI Inference</h3>
            <input type="text" id="testPrompt" class="test-input" placeholder="Enter trading prompt (e.g., 'Predict BTC price movement')" value="Analyze BTC market and recommend trading action">
            <button class="action-btn" onclick="testInference()">Test Inference</button>
            <div id="testResult" class="test-result" style="display:none;"></div>
        </div>

        <div class="footer">
            <p>AITB System ‚Ä¢ ASP.NET Core WebApp ‚Ä¢ Last Updated: @DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss")</p>
        </div>
    </div>

    <script>
        // SignalR connection for real-time updates
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/tradehub")
            .build();

        connection.start().then(function () {
            console.log("SignalR Connected");
        }).catch(function (err) {
            console.error(err.toString());
        });

        connection.on("ReceiveTrade", function (trade) {
            console.log("New trade received:", trade);
            // Add live trade updates here
        });

        async function testInference() {
            const prompt = document.getElementById('testPrompt').value;
            const resultDiv = document.getElementById('testResult');
            
            resultDiv.style.display = 'block';
            resultDiv.innerHTML = 'Testing inference...';
            
            try {
                const response = await fetch('/Home/TestInference', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ prompt: prompt })
                });
                
                const result = await response.json();
                
                if (result.success) {
                    resultDiv.innerHTML = `<strong>‚úÖ Success:</strong><br/><pre>${JSON.stringify(JSON.parse(result.result), null, 2)}</pre>`;
                } else {
                    resultDiv.innerHTML = `<strong>‚ùå Error:</strong><br/>${result.error}`;
                }
            } catch (error) {
                resultDiv.innerHTML = `<strong>‚ùå Error:</strong><br/>${error.message}`;
            }
        }
    </script>
</body>
</html>