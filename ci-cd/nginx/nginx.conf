# AITB Blue/Green Nginx Configuration
# Episode 7 - Local blue/green switching with atomic upstream switching
# This configuration supports zero-downtime deployments with immediate rollback capability

worker_processes auto;
error_log D:/logs/nginx/error.log warn;
pid D:/nginx/nginx.pid;

events {
    worker_connections 1024;
    use iocp;  # Windows-specific optimization
}

http {
    include       mime.types;
    default_type  application/octet-stream;
    
    # Logging configuration
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                   '$status $body_bytes_sent "$http_referer" '
                   '"$http_user_agent" "$http_x_forwarded_for" '
                   'upstream: $upstream_addr response_time: $upstream_response_time';
    
    access_log D:/logs/nginx/access.log main;
    
    # Basic optimizations
    sendfile        on;
    tcp_nopush      on;
    tcp_nodelay     on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    
    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1000;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml;

    # AITB Blue/Green Upstream Definitions
    # =====================================
    
    # WebApp Upstreams (ASP.NET Core)
    upstream webapp_blue {
        server 127.0.0.1:5000 max_fails=3 fail_timeout=30s;
        # Health check path: GET /health/live
    }
    
    upstream webapp_green {
        server 127.0.0.1:5002 max_fails=3 fail_timeout=30s;
        # Health check path: GET /health/live
    }
    
    # Inference Service Upstreams (FastAPI)
    upstream inference_blue {
        server 127.0.0.1:8001 max_fails=3 fail_timeout=30s;
        # Health check path: GET /health
    }
    
    upstream inference_green {
        server 127.0.0.1:8003 max_fails=3 fail_timeout=30s;
        # Health check path: GET /health
    }
    
    # Dashboard Upstreams (Streamlit)
    upstream dashboard_blue {
        server 127.0.0.1:8501 max_fails=3 fail_timeout=30s;
        # Health check path: GET /health (or GET / for Streamlit)
    }
    
    upstream dashboard_green {
        server 127.0.0.1:8503 max_fails=3 fail_timeout=30s;
        # Health check path: GET /health (or GET / for Streamlit)
    }
    
    # Active Environment Mapping
    # ==========================
    # These map directives control which color is active
    # They are dynamically updated by the promotion script
    
    # Include the current environment mapping
    include D:/AITB/ci-cd/nginx/env-mapping.conf;
    
    # Main Server Block - Production Endpoints
    # ========================================
    server {
        listen 80;
        listen 443 ssl http2;
        server_name localhost aitb.local;
        
        # SSL Configuration (self-signed for local development)
        ssl_certificate     D:/AITB/ci-cd/nginx/ssl/server.crt;
        ssl_certificate_key D:/AITB/ci-cd/nginx/ssl/server.key;
        ssl_protocols       TLSv1.2 TLSv1.3;
        ssl_ciphers         HIGH:!aNULL:!MD5;
        
        # Security headers
        add_header X-Frame-Options DENY;
        add_header X-Content-Type-Options nosniff;
        add_header X-XSS-Protection "1; mode=block";
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
        
        # Main WebApp - Production Traffic
        location / {
            proxy_pass http://$webapp_env;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $host;
            
            # Connection and timeout settings
            proxy_connect_timeout 5s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
            proxy_buffering off;
            
            # WebSocket support for SignalR
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
        }
        
        # Inference API - Production Traffic
        location /api/inference/ {
            rewrite ^/api/inference/(.*) /$1 break;
            proxy_pass http://$inference_env;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # API specific timeouts
            proxy_connect_timeout 10s;
            proxy_send_timeout 300s;  # ML inference can be slow
            proxy_read_timeout 300s;
            proxy_buffering off;
        }
        
        # Dashboard - Production Traffic
        location /dashboard/ {
            rewrite ^/dashboard/(.*) /$1 break;
            proxy_pass http://$dashboard_env;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Streamlit specific settings
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_connect_timeout 5s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
            proxy_buffering off;
        }
        
        # Health Check Endpoints
        location /health {
            proxy_pass http://$webapp_env/health/live;
            proxy_set_header Host $host;
            proxy_connect_timeout 2s;
            proxy_send_timeout 5s;
            proxy_read_timeout 5s;
            access_log off;  # Don't log health checks
        }
        
        # Blue/Green Status Endpoint
        location /admin/deployment-status {
            default_type application/json;
            return 200 '{"environment":"$webapp_env","inference":"$inference_env","dashboard":"$dashboard_env","timestamp":"$time_iso8601"}';
            access_log off;
        }
    }
    
    # Blue Environment Direct Access
    # ==============================
    server {
        listen 8080;
        server_name localhost;
        
        location / {
            proxy_pass http://webapp_blue;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Add environment identifier header
            add_header X-AITB-Environment "blue";
        }
        
        location /api/inference/ {
            rewrite ^/api/inference/(.*) /$1 break;
            proxy_pass http://inference_blue;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            add_header X-AITB-Environment "blue";
        }
        
        location /dashboard/ {
            rewrite ^/dashboard/(.*) /$1 break;
            proxy_pass http://dashboard_blue;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            add_header X-AITB-Environment "blue";
        }
    }
    
    # Green Environment Direct Access
    # ===============================
    server {
        listen 8090;
        server_name localhost;
        
        location / {
            proxy_pass http://webapp_green;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Add environment identifier header
            add_header X-AITB-Environment "green";
        }
        
        location /api/inference/ {
            rewrite ^/api/inference/(.*) /$1 break;
            proxy_pass http://inference_green;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            add_header X-AITB-Environment "green";
        }
        
        location /dashboard/ {
            rewrite ^/dashboard/(.*) /$1 break;
            proxy_pass http://dashboard_green;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            add_header X-AITB-Environment "green";
        }
    }
}