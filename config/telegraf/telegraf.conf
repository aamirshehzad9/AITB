# Telegraf Configuration for AITB Platform
# Collects system, Docker, and application metrics

[global_tags]
  environment = "$NODE_ENV"
  platform = "aitb"
  version = "1.0.0"

[agent]
  interval = "10s"
  round_interval = true
  metric_batch_size = 1000
  metric_buffer_limit = 10000
  collection_jitter = "0s"
  flush_interval = "10s"
  flush_jitter = "0s"
  precision = ""
  hostname = ""
  omit_hostname = false

# InfluxDB v2 Output
[[outputs.influxdb_v2]]
  urls = ["$INFLUX_URL"]
  token = "$INFLUX_TOKEN"
  organization = "$INFLUX_ORG"
  bucket = "$INFLUX_BUCKET"
  timeout = "5s"

# System CPU Usage
[[inputs.cpu]]
  percpu = true
  totalcpu = true
  collect_cpu_time = false
  report_active = false

# System Memory Usage
[[inputs.mem]]

# System Disk Usage
[[inputs.disk]]
  ignore_fs = ["tmpfs", "devtmpfs", "devfs", "iso9660", "overlay", "aufs", "squashfs"]

# System Disk I/O
[[inputs.diskio]]

# Network Interface Statistics
[[inputs.net]]

# System Network Statistics
[[inputs.netstat]]

# System Load
[[inputs.system]]

# Process Monitoring
[[inputs.procstat]]
  pattern = "python.*inference"
  pid_tag = true
  [inputs.procstat.tags]
    service = "aitb-inference"

[[inputs.procstat]]
  pattern = "python.*bot"
  pid_tag = true
  [inputs.procstat.tags]
    service = "aitb-bot"

# Docker Container Monitoring
[[inputs.docker]]
  endpoint = "unix:///var/run/docker.sock"
  gather_services = false
  container_names = []
  source_tag = false
  container_name_include = ["aitb-*"]
  container_name_exclude = []
  timeout = "5s"
  perdevice = true
  total = false
  docker_label_include = ["com.docker.compose.service"]
  docker_label_exclude = []

# Docker Container Logs
[[inputs.docker_log]]
  endpoint = "unix:///var/run/docker.sock"
  from_beginning = false
  timeout = "5s"
  container_name_include = ["aitb-*"]
  container_state_include = ["running"]

# HTTP Response Time Monitoring
[[inputs.http_response]]
  urls = [
    "http://aitb-inference:8001/health",
    "http://aitb-bot:8000/health", 
    "http://aitb-dashboard:3000",
    "http://aitb-grafana:3000/api/health"
  ]
  response_timeout = "5s"
  method = "GET"
  follow_redirects = false
  [inputs.http_response.tags]
    service_type = "health_check"

# InfluxDB Health Monitoring
[[inputs.influxdb]]
  urls = ["$INFLUX_URL"]
  token = "$INFLUX_TOKEN"
  organization = "$INFLUX_ORG"
  timeout = "5s"

# HTTP Listener for Custom Metrics (from applications)
[[inputs.http_listener_v2]]
  service_address = ":8080"
  path = "/telegraf"
  methods = ["POST"]
  read_timeout = "10s"
  write_timeout = "10s"
  max_body_size = "500KB"
  max_line_size = "64KB"
  basic_username = ""
  basic_password = ""
  data_format = "influx"
  [inputs.http_listener_v2.tags]
    source = "application"

# Socket Listener for StatsD metrics
[[inputs.statsd]]
  service_address = ":8125"
  protocol = "udp"
  max_tcp_connections = 250
  tcp_keep_alive = false
  separator = "_"
  allow_pending_messages = 10000
  percentile_limit = 1000
  percentiles = [50.0, 90.0, 95.0, 99.0, 99.9]
  metric_separator = "_"
  parse_data_dog_tags = false
  datadog_extensions = false
  datadog_distributions = false
  [inputs.statsd.tags]
    source = "statsd"

# Internal Telegraf Metrics
[[inputs.internal]]
  collect_memstats = true

# Ping Monitoring for External Dependencies
[[inputs.ping]]
  urls = ["coinapi.io", "api.coinmarketcap.com", "huggingface.co"]
  count = 3
  ping_timeout = 1.0
  deadline = 10
  [inputs.ping.tags]
    source = "external_deps"

# File Monitoring (Log file sizes)
[[inputs.filecount]]
  directories = ["/var/log/telegraf", "/app/logs"]
  name = "*.log"
  recursive = true
  regular_only = true
  size = true
  mtime = true
  [inputs.filecount.tags]
    log_type = "application"

# Temperature Monitoring (if available)
[[inputs.temp]]
  [inputs.temp.tags]
    source = "hardware"

# Kernel Monitoring
[[inputs.kernel]]

# Swap Usage
[[inputs.swap]]

# User Sessions
[[inputs.users]]

# Uptime
[[inputs.uptime]]

# Custom Trading Metrics Input (placeholder for future use)
# This will receive metrics from the trading bot via HTTP
[[inputs.http_listener_v2]]
  service_address = ":8081"
  path = "/trading"
  methods = ["POST"]
  read_timeout = "10s"
  write_timeout = "10s"
  max_body_size = "1MB"
  data_format = "json"
  json_name_key = "metric_name"
  json_time_key = "timestamp"
  json_time_format = "2006-01-02T15:04:05Z07:00"
  [inputs.http_listener_v2.tags]
    source = "trading_bot"
    category = "business_metrics"

# AI Model Performance Metrics
[[inputs.http_listener_v2]]
  service_address = ":8082" 
  path = "/models"
  methods = ["POST"]
  read_timeout = "10s"
  write_timeout = "10s"
  max_body_size = "500KB"
  data_format = "json"
  json_name_key = "model_name"
  json_time_key = "timestamp"
  json_time_format = "2006-01-02T15:04:05Z07:00"
  [inputs.http_listener_v2.tags]
    source = "inference_server"
    category = "ai_metrics"